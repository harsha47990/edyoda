#1. Binary Search
lst = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]
search = 4
l = 0
h = len(lst)-1
while True:
    m = (l+h)//2
    if search == lst[m]:
        print('found at position',m)
        break
    elif search < lst[m]:
        h = m
    else:
        l = m
    if h - l == 1:
        print('element not found')
        break
    
#2. Merge sort
lst = [2,3,6,8,9,5,1,10,4,5,6,3,12,7,8]

def mergesort(lst):
    if len(lst) > 1:
        m = len(lst)//2
        L = lst[:m]
        R = lst[m:]
        mergesort(L)
        mergesort(R)
        i = j = k = 0
        while i < len(L) and j < len(R):
            if L[i] < R[j]:
                lst[k] = L[i]
                i += 1
            else:
                lst[k] = R[j]
                j += 1
            k += 1
            
        while i < len(L):
            lst[k] = L[i]
            i += 1
            k += 1
  
        while j < len(R):
            lst[k] = R[j]
            j += 1
            k += 1

mergesort(lst)
print(lst)

#3. quick sort

def partition(s,e,lst):
    pi = s
    pv = lst[pi]
    while s < e:
        while s < len(lst) and lst[s] <= pv:
            s+=1
        while lst[e] > pv:
            e -= 1
        if s < e:
            lst[s],lst[e] = lst[e], lst[s]
    lst[e],lst[pi] = lst[pi], lst[e]
    return e

def quicksort(s,e,lst):
    if s < e:
        p = partition(s,e, lst)
        quicksort(0,p-1,lst)
        quicksort(p+1,e, lst)

lst = [2,3,6,8,9,5,1,10,4,5,6,3,12,7,8]
quicksort(0, len(lst)-1,lst)
print(lst)
        
#4. Isertion sort
        
def insertionsort(lst):
    for i in range(1,len(lst)):
        if lst[i-1] > lst[i]:
            val = lst[i]
            j = i-1
            while j >= 0 and val < lst[j] :
                lst[j + 1] = lst[j]
                j -= 1
            lst[j + 1] = val
        
    
lst = [9,8,7,6,5,4,3,2,1]
insertionsort(lst)
print(lst)


#5. Sort strings
lst = ['harsha','abb','abc','aaa','bcd','ed','cdd','tgf']
quicksort(0, len(lst)-1,lst)
print(lst)
