class SimpleGraph:

    def __init__(self):
        self.graph = dict()
        self.V = set()
    def addEdge(self,u,v):
        if u in self.graph:
            self.graph[u].append(v)
        else:
            self.graph[u] = list()
            self.graph[u].append(v)
        self.V.add(u)
        self.V.add(v)
         
    def BFS(self, s):
 
        visited = [False] * (max(self.graph) + 1)
        queue = []
        queue.append(s)
        visited[s] = True
 
        while queue:
            s = queue.pop(0)
            print (s, end = " ")
            if s in self.graph:
                for i in self.graph[s]:
                    if visited[i] == False:
                        queue.append(i)
                        visited[i] = True
                        
    def DFS(self, v, visited = set()):
        visited.add(v)
        print(v, end=' ')
        for neighbour in self.graph[v]:
            if neighbour not in visited:
                self.DFS(neighbour, visited)
                
    def isCyclic(self, v, visited, recStack):
        visited[v] = True
        recStack[v] = True
 
        for neighbour in self.graph[v]:
            if visited[neighbour] == False:
                if self.isCyclic(neighbour, visited, recStack) == True:
                    return True
            elif recStack[neighbour] == True:
                return True
 
        recStack[v] = False
        return False
 
    def checkcyclic(self):
        
        visited = [False] * (len(self.V) + 1)
        recStack = [False] * (len(self.V) + 1)
        for node in range(len(self.V)):
            if visited[node] == False:
                if self.isCyclic(node,visited,recStack) == True:
                    return True
        return False
 
                    
graph = SimpleGraph()
graph.addEdge(0, 1)
graph.addEdge(0, 2)
graph.addEdge(1, 2)
graph.addEdge(2, 0)
graph.addEdge(2, 3)
graph.addEdge(3, 3)

#1.Breadth First Traversal for a Graph

print("BFS")
graph.BFS(2)
print()
#2. Depth First Traversal for a Graph

print("DFS")
graph.DFS(2)

#5. Detect Cycle in a Directed Graph
graph.checkcyclic()

#3. Count the number of nodes at given level in a tree using BFS

class Node:
    def __init__(self, data):
        self.left = None
        self.right = None
        self.data = data

    def insert(self, data):
        if data < self.data:
            if self.left is None:
                self.left = Node(data)
            else:
                self.left.insert(data)
        elif data > self.data:
            if self.right is None:
                self.right = Node(data)
            else:
                self.right.insert(data)

    def display(self):
        if self.left:
            self.left.display()
        print( self.data),
        if self.right:
            self.right.display()

root = Node(5)
root.insert(4)
root.insert(8)
root.insert(1)
root.insert(6)
root.insert(2)
root.insert(9)

def nodesatlevel(root,level):
    if (root == None):
        return 0
 
    result = root.data
    q = []
    q.append(root)
     
    while (len(q) > 0):
        count = len(q)
        if level == 0:
            print(count)
        level -= 1
        while (count > 0):
            temp = q[0]
            del q[0]
            if (temp.left != None):
                q.append(temp.left)
            if (temp.right != None):
                q.append(temp.right)
                 
            count -= 1
nodesatlevel(root,2)                

#4. Count number of trees in a forest

def addedge(adj, u, v):
    adj[u].append(v)
    adj[v].append(u)
    
def DFS(u, adj, visited):
    visited[u] = True
    for i in range(len(adj[u])):
        if (visited[adj[u][i]] == False):
            DFS(adj[u][i], adj, visited)
            
def counttrees(adj, V):
    visited = [False] * V
    out = 0
    for u in range(V):
        if (visited[u] == False):
            DFS(u, adj, visited)
            out += 1
    return out
V = 6
adj = [[] for i in range(V)]
addedge(adj, 0, 1)
addedge(adj, 0, 2)
addedge(adj, 2, 3)
addedge(adj, 3, 4)
print(counttrees(adj, V))

# Implement n-Queenâ€™s Problem

import random as r
     
def checkvalidity(m,r,c):
    s = set()
    N = len(m)
    for i in range(N):
        s.add(tuple(m[:][i]))
    if len(s) != N:
        return False
    s = set()
    for i in range(N):
        s.add(tuple(m[i][:]))
    if len(s) != N:
        return False 
    
    for i in range(2*N-1):
        a = 0
        b = i
        if i >= N:
            b = N-1
            a = i-N+1
        found = False
        while a < N and b < N and a > -1 and b > -1:
            if m[a][b] == 1:
                if not found:
                    found = True
                else:
                    return False
            b -= 1
            a += 1


    for i in range(2*N-1):
        a = N-1-i
        b = 0
        if a < 0:
            a = 0
            b = i - N + 1
        found = False
        while a < N and b < N and a > -1 and b > -1:
            if m[a][b] == 1:
                if not found:
                    found = True
                else:
                    return False
                    pass
            b += 1
            a += 1

    return True
        
        
        
def checkmatrix(m):
   #print('checkmartirx',m)
    N = len(m[0])
    for i in range(N):
        for j in range(N):
            if m[i][j] == 1:
                if not checkvalidity(m,i,j):
                    return False
    return True

while True:
    N = 4
    matrix = []
    for i in range(N):
        t = [0 for j in range(N)]
        matrix.append(t)
    for i in range(N):
        n = r.randrange(0,N)
        matrix[i][n] = 1
    if checkmatrix(matrix):
        for i in matrix:
            print(i)
        break
    
    
    
